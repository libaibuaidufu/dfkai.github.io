<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>grpc 之 word2pdf使用</title>
    <url>/2020/08/05/grpc-%E4%B9%8B-word2pdf%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<pre><code>    做一个word转pdf的服务，采用grpc，使用libreoffice命令。</code></pre>
</blockquote>
<a id="more"></a>

<h2 id="构建libreoffice镜像"><a href="#构建libreoffice镜像" class="headerlink" title="构建libreoffice镜像"></a>构建libreoffice镜像</h2><ol>
<li>采用python3.6镜像 </li>
<li>使用阿里源</li>
<li>安装libreoffice</li>
<li>解决中文乱码 加入中文字体</li>
</ol>
<h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /etc/apt \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv sources.list sources.list.bak \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib \</span></span></span><br><span class="line"><span class="bash">deb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib \</span></span><br><span class="line"><span class="bash">deb http://mirrors.aliyun.com/debian-security stretch/updates main \</span></span><br><span class="line"><span class="bash">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main \</span></span><br><span class="line"><span class="bash">deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib \</span></span><br><span class="line"><span class="bash">deb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib \</span></span><br><span class="line"><span class="bash">deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib \</span></span><br><span class="line"><span class="bash">deb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib<span class="string">&quot; &gt; sources.list</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y libreoffice</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./ /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mv /root/simsun.ttc /usr/share/fonts &amp;&amp; mv /root/simhei.ttf /usr/share/fonts &amp;&amp; <span class="built_in">cd</span> /usr/share/fonts &amp;&amp; <span class="built_in">fc</span>-cache -fv</span></span><br><span class="line"><span class="comment"># docker build -t libreoffice .</span></span><br></pre></td></tr></table></figure>

<h2 id="grpc服务端、客户端"><a href="#grpc服务端、客户端" class="headerlink" title="grpc服务端、客户端"></a>grpc服务端、客户端</h2><ol>
<li><p>创建proto配置文件 然后编译</p>
</li>
<li><p>服务端与客户端 采用二进制  数据进行传输</p>
</li>
</ol>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/7/9 0009 16:41</span></span><br><span class="line"><span class="comment"># @File    : word2pdf_server_main.py</span></span><br><span class="line"><span class="comment"># @author  : dfkai</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./data.proto</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> proto_py <span class="keyword">import</span> word2pdf_pb2, word2pdf_pb2_grpc</span><br><span class="line"></span><br><span class="line">_ONE_DAY_IN_SECONDS = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span></span><br><span class="line">_HOST = os.environ.get(<span class="string">&quot;HOSTNAME&quot;</span>, <span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">_PORT = <span class="string">&#x27;8080&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormatData</span>(<span class="params">word2pdf_pb2_grpc.FormatDataServicer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DoFormat</span>(<span class="params">self, request, context</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        proto 定义方法</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :param context:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        data = request.text</span><br><span class="line">        doc_path, pdf_path, pdf_file_path = self.get_doc_pdf_path()</span><br><span class="line">        <span class="keyword">with</span> open(doc_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br><span class="line">        <span class="keyword">if</span> self.word2pdf_linux(doc_path, pdf_path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(pdf_file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    pdf_data = f.read()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                traceback.format_exc()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pdf_data = <span class="string">b&quot;fail&quot;</span></span><br><span class="line">        <span class="keyword">return</span> word2pdf_pb2.Data(text=pdf_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_doc_pdf_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取文件路径</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        baseDir = os.getcwd()</span><br><span class="line">        p = pathlib.Path(baseDir)</span><br><span class="line">        u_name = str(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        doc_name = u_name + <span class="string">&quot;.docx&quot;</span></span><br><span class="line">        pdf_name = u_name + <span class="string">&quot;.pdf&quot;</span></span><br><span class="line">        pdf_path = p / <span class="string">f&quot;filepath/pdf/&quot;</span></span><br><span class="line">        doc_path = p / <span class="string">f&quot;filepath/doc/<span class="subst">&#123;doc_name&#125;</span>&quot;</span></span><br><span class="line">        pdf_file_path = p / <span class="string">f&quot;filepath/pdf/<span class="subst">&#123;pdf_name&#125;</span>&quot;</span></span><br><span class="line">        print(doc_path, pdf_path, pdf_file_path)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">rf&quot;<span class="subst">&#123;doc_path&#125;</span>&quot;</span>, <span class="string">rf&quot;<span class="subst">&#123;pdf_path&#125;</span>&quot;</span>, <span class="string">rf&quot;<span class="subst">&#123;pdf_file_path&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">word2pdf_win</span>(<span class="params">self, doc_path, pdf_path</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        windows 生成</span></span><br><span class="line"><span class="string">        :param doc_path:</span></span><br><span class="line"><span class="string">        :param pdf_path:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> win32com <span class="keyword">import</span> client</span><br><span class="line">        <span class="keyword">import</span> pythoncom</span><br><span class="line">        pythoncom.CoInitialize()</span><br><span class="line">        <span class="comment"># word = client.Dispatch(&quot;Word.Application&quot;)</span></span><br><span class="line">        word = client.DispatchEx(<span class="string">&quot;Word.Application&quot;</span>)</span><br><span class="line">        worddoc = word.Documents.Open(doc_path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            worddoc.SaveAs(pdf_path, FileFormat=<span class="number">17</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            worddoc.Close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">word2pdf_linux</span>(<span class="params">self, doc_path, pdf_path</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        linux 生成 pdf ,利用 libreoffice 命令</span></span><br><span class="line"><span class="string">        :param doc_path:</span></span><br><span class="line"><span class="string">        :param pdf_path:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.system(<span class="string">f&quot;soffice --headless --invisible --convert-to pdf <span class="subst">&#123;doc_path&#125;</span> --outdir <span class="subst">&#123;pdf_path&#125;</span> &quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.format_exc()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    rpc 服务</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    grpcServer = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class="number">4</span>))</span><br><span class="line">    word2pdf_pb2_grpc.add_FormatDataServicer_to_server(FormatData(), grpcServer)</span><br><span class="line">    grpcServer.add_insecure_port(_HOST + <span class="string">&#x27;:&#x27;</span> + _PORT)</span><br><span class="line">    grpcServer.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(_ONE_DAY_IN_SECONDS)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        grpcServer.stop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    serve()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/7/9 0009 16:40</span></span><br><span class="line"><span class="comment"># @File    : word2pdf_client_main.py</span></span><br><span class="line"><span class="comment"># @author  : dfkai</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"><span class="keyword">from</span> proto_py <span class="keyword">import</span> word2pdf_pb2, word2pdf_pb2_grpc</span><br><span class="line"></span><br><span class="line">_HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">_PORT = <span class="string">&#x27;8080&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    file_name = <span class="string">&quot;test&quot;</span></span><br><span class="line">    doc_name = file_name + <span class="string">&#x27;.doc&#x27;</span></span><br><span class="line">    conn = grpc.insecure_channel(_HOST + <span class="string">&#x27;:&#x27;</span> + _PORT)</span><br><span class="line">    client = word2pdf_pb2_grpc.FormatDataStub(channel=conn)</span><br><span class="line">    <span class="keyword">with</span> open(doc_name, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    response = client.DoFormat(word2pdf_pb2.Data(text=data))</span><br><span class="line">    <span class="keyword">if</span> response.text == <span class="string">b&quot;fail&quot;</span>:</span><br><span class="line">        <span class="comment"># 发送消息 生成失败</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pdf_name = file_name + <span class="string">f&#x27;.pdf&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> open(pdf_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.text)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.format_exc()</span><br><span class="line">            <span class="comment"># 发送消息 生成失败</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 发送消息 生成成功</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    beg = time.time()</span><br><span class="line">    run()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(end - beg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="proto配置文件"><a href="#proto配置文件" class="headerlink" title="proto配置文件"></a>proto配置文件</h3><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">FormatData</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> DoFormat(Data) <span class="keyword">returns</span> (Data)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bytes</span> text = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入文件目录，构建命令：python -m grpc_tools.protoc -I. –python_out=./proto_py/ –grpc_python_out=./proto_py/ ./proto/word2pdf.proto</p>
<h2 id="构建rpc服务端镜像"><a href="#构建rpc服务端镜像" class="headerlink" title="构建rpc服务端镜像"></a>构建rpc服务端镜像</h2><h3 id="dockerfile-1"><a href="#dockerfile-1" class="headerlink" title="dockerfile"></a>dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> libreoffice</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./ /root/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/word2pdfRPC</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -i https://mirrors.aliyun.com/pypi/simple/ -r requirments.txt</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> python server_main.py</span></span><br><span class="line"><span class="comment"># docker build -t word2pdf .</span></span><br><span class="line"><span class="comment"># docker run -d -p 8080:8080 -v /root/data/word2pdf/:/root/word2pdfRPC/filepath/ --name word2pdf word2pdf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="reuirements-txt"><a href="#reuirements-txt" class="headerlink" title="reuirements.txt"></a>reuirements.txt</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">futures&#x3D;&#x3D;3.1.1</span><br><span class="line">grpcio&#x3D;&#x3D;1.22.0</span><br><span class="line">grpcio-tools&#x3D;&#x3D;1.22.0</span><br><span class="line">protobuf&#x3D;&#x3D;3.8.0</span><br></pre></td></tr></table></figure>



<p>参考、推荐:</p>
<ol>
<li><a href="https://blog.csdn.net/xqy1522/article/details/6942344">protobuf和thrift对比</a></li>
<li><a href="https://developers.google.com/protocol-buffers/docs/proto3">Language Guide (proto3)</a></li>
<li><a href="https://developers.google.com/protocol-buffers/docs/encoding">Encoding</a></li>
</ol>
]]></content>
      <categories>
        <category>代码来了</category>
      </categories>
      <tags>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题文章列表 显示摘要</title>
    <url>/2020/08/05/My-New-Post/</url>
    <content><![CDATA[<p>本文针对Next主题，不确保对于其它主题有效（但从修改模式来看，是有效的）</p>
<p>Next默认是会显示全文的，这样显然很不方便，因此需要一些方法去只显示前面一部分。</p>
<h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p>首先需要在Next主题的_config.yml中把设置打开：(默认安装时就打开了)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>之后有两种方法</p>
<h2 id="方法一：写概述"><a href="#方法一：写概述" class="headerlink" title="方法一：写概述"></a>方法一：写概述</h2><p>在文章的<code>front-matter</code>中添加<code>description</code>，其中description中的内容就会被显示在首页上，其余一律不显示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 让首页显示部分内容</span><br><span class="line">date: 2020-02-23 22:55:10</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>比较不方便的是还得写一下概述，很多时候会懒得写概述，于是就需要第二种方法了。</p>
<h2 id="方法二：文章截断"><a href="#方法二：文章截断" class="headerlink" title="方法二：文章截断"></a>方法二：文章截断</h2><p>在需要截断的地方加入：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>首页就会显示这条以上的所有内容，隐藏接下来的所有内容。<br>例如本文会显示到<code>修改配置</code>上面。</p>
<p>这个明显就方便很多，但当然有利有弊，比如开头都是废话首页看着就不是很好看，因此我一般会先选择方法二，如果感觉文章前面的写的不太好再用方法一。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>github actions 自动部署 hexo</title>
    <url>/2020/08/06/github-actions-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hexo/</url>
    <content><![CDATA[<p>github actions 自动部署 hexo,感觉还是有点问题。有很多方法可以解决，但是我这里就不折腾了。</p>
<a id="more"></a>

<p>我自己的提问：<a href="https://github.com/JamesIves/github-pages-deploy-action/issues/389">https://github.com/JamesIves/github-pages-deploy-action/issues/389</a></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>hexo 安装 需要全局，但是没有权限无法安装。可以利用docker安装 ，解决权限问题。</p>
<p>但是新版本的 action，作者去掉了docker，鼓励本地直接构建，然后直接同步。</p>
<p><strong>而且同步到其他仓库的功能在新的版本里才可以使用</strong></p>
<p>最后我已使用了本地构建这个方案。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">buildAndDeploy</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@3.5.9</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">REPOSITORY_NAME:</span> <span class="string">libaibuaidufu/libaibuaidufu.github.io</span></span><br><span class="line">        <span class="attr">BRANCH:</span> <span class="string">master</span> </span><br><span class="line">        <span class="attr">BASE_BRANCH:</span> <span class="string">master</span> </span><br><span class="line">        <span class="attr">FOLDER:</span> <span class="string">public</span> </span><br></pre></td></tr></table></figure>

<h3 id="骚操作"><a href="#骚操作" class="headerlink" title="骚操作"></a>骚操作</h3><p>中途我也想了骚操作，例如用以前的版本，来构建，再用新的版本来部署。最后出现了权限问题。就没有继续了。</p>
<p><strong>因为同步到其他仓库的功能在新的版本里才可以使用</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">buildAndDeploy</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@releases/v2</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">REPOSITORY_NAME:</span> <span class="string">libaibuaidufu/libaibuaidufu/private-blog-deploy-actions</span></span><br><span class="line">        <span class="attr">BASE_BRANCH:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">FOLDER:</span> <span class="string">public</span></span><br><span class="line">        <span class="attr">BUILD_SCRIPT:</span>  <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@3.5.9</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">REPOSITORY_NAME:</span> <span class="string">libaibuaidufu/libaibuaidufu.github.io</span></span><br><span class="line">        <span class="attr">BRANCH:</span> <span class="string">master</span> </span><br><span class="line">        <span class="attr">BASE_BRANCH:</span> <span class="string">master</span> </span><br><span class="line">        <span class="attr">FOLDER:</span> <span class="string">public</span> </span><br></pre></td></tr></table></figure>

<h3 id="windows-bat-命令"><a href="#windows-bat-命令" class="headerlink" title="windows bat 命令"></a>windows bat 命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cls</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 清理中。。。</span><br><span class="line">call hexo clean </span><br><span class="line"><span class="built_in">echo</span> 重新构建。。。</span><br><span class="line">call hexo g </span><br><span class="line"><span class="built_in">echo</span> 添加新的修改。。。</span><br><span class="line">call git add . </span><br><span class="line"><span class="built_in">set</span> /p commit_message=提交内容：</span><br><span class="line"><span class="built_in">echo</span> 提交新的修改</span><br><span class="line">call git commit -m %commit_message%</span><br><span class="line"><span class="built_in">echo</span> 推送新的修改</span><br><span class="line">call git push -u origin master</span><br><span class="line"><span class="built_in">echo</span> 已完成</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github-action</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 的基础使用</title>
    <url>/2020/08/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
  </entry>
  <entry>
    <title>selenium 反爬虫识别特征处理</title>
    <url>/2020/08/05/selenium-%E5%8F%8D%E7%88%AC%E8%99%AB%E8%AF%86%E5%88%AB%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p><strong>因为业务中发现网站对selenium特征识别为爬虫了，因此在搜索引擎中搜索进行处理</strong></p>
<a id="more"></a>

<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例化一个浏览器对象</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> sys.platform == <span class="string">&quot;win32&quot;</span>:</span><br><span class="line">    browser = webdriver.Chrome(driver_path, options=options)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.implicitly_wait(<span class="number">30</span>)</span><br><span class="line">browser.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">      get: () =&gt; undefined</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>此方法虽然可以躲避识别，但是在使用过一段时候后，依然出现被屏蔽的问题。</p>
<p>因此只有继续搜索 然后再stackoverflow 中又找到了新的答案。</p>
<h3 id="方式二-（推荐）"><a href="#方式二-（推荐）" class="headerlink" title="方式二 （推荐）"></a>方式二 （推荐）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例化一个浏览器对象</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-blink-features=AutomationControlled&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> sys.platform == <span class="string">&quot;win32&quot;</span>:</span><br><span class="line">    browser = webdriver.Chrome(driver_path, options=options)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    browser = webdriver.Chrome(options=options)</span><br></pre></td></tr></table></figure>

<p>这个方法执行的后，目前运行良好也没有出现被识别的问题。</p>
<h3 id="关闭当前标签-在切换标签前关闭"><a href="#关闭当前标签-在切换标签前关闭" class="headerlink" title="关闭当前标签 在切换标签前关闭"></a>关闭当前标签 在切换标签前关闭</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.close()</span><br><span class="line">windows = driver.window_handles</span><br><span class="line">driver.switch_to.window(windows[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码来了</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题 安装记录</title>
    <url>/2020/08/05/install-next-all/</url>
    <content><![CDATA[<p>最近无聊有想整点东西，想这写blog，就心血来潮又搞了hexo，想着这次一定要静下心来。</p>
<a id="more"></a>

<h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g --registry=https://registry.npm.taobao.org</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h3 id="根据配置-修改自己的信息"><a href="#根据配置-修改自己的信息" class="headerlink" title="根据配置 修改自己的信息"></a>根据配置 修改自己的信息</h3><p>官网：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p>
<h3 id="安装主题-next"><a href="#安装主题-next" class="headerlink" title="安装主题 next"></a>安装主题 next</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="修改-主题配置"><a href="#修改-主题配置" class="headerlink" title="修改 主题配置"></a>修改 主题配置</h3><p>官网：<a href="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html</a></p>
<h3 id="集成第三方插件"><a href="#集成第三方插件" class="headerlink" title="集成第三方插件"></a>集成第三方插件</h3><h4 id="1-搜索"><a href="#1-搜索" class="headerlink" title="1.搜索"></a>1.搜索</h4><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h5 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h5><p>安装完成，编辑博客配置文件：<code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<h5 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h5><p>Next 主题自带搜索设置，编辑主题配置文件：<code>_config.yml</code></p>
<p>找到文件中 Local search 的相关配置，设为 <code>true</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h4 id="2-评论和阅读次数"><a href="#2-评论和阅读次数" class="headerlink" title="2.评论和阅读次数"></a>2.评论和阅读次数</h4><p>注册 learncloud 进行部署</p>
<h3 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h3><p>github：<a href="https://hexo.io/zh-cn/docs/github-pages">https://hexo.io/zh-cn/docs/github-pages</a></p>
<p>一键部署：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">https://hexo.io/zh-cn/docs/one-command-deployment</a></p>
<p>安装插件：<code>npm install hexo-deployer-git --save --registry=https://registry.npm.taobao.org</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;project&gt;</span></span><br><span class="line">  <span class="comment"># example, https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>
